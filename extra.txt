if (InstrMap.toCode.keySet().contains(arr_code[0]) && inputs > 0) {
				readingCode = true;
				inputs = 0;
			}
			if (!(code.get(i).trim().length() == 0) && endOfCode) {
				error.append("\nError (" + inputFileName + ".pasm, " + lineOfEnd + "): illegal blank line");
				endOfCode = false;
			}
			if (code.get(i).trim().length() == 0) {
				if (!endOfCode) lineOfEnd = i + 1;
				endOfCode = true;
				continue;
			}
			if (code.get(i).charAt(0) == ' ' || code.get(i).charAt(0) == '\t') {
				error.append("\nError (" + inputFileName + ".pasm, " + (i + 1) + "): line starts with illegal white space");
				continue;
			}
			// checks data
			if (code.get(i).trim().toUpperCase().equals("DATA") && readingCode) {
				readingCode = false;
				continue;
			}
			else if (code.get(i).trim().toUpperCase().equals("DATA") && !readingCode) {
				error.append("\nError (" + inputFileName + ".pasm, " + (i + 1) + "): line has a second DATA separator");
				continue;
			}
			else if (code.get(i).trim().toUpperCase().equals("DATA") && !code.get(i).trim().equals("DATA")) {
				error.append("\nError (" + inputFileName + ".pasm, " + (i + 1) + "): line does not have DATA in upper case");
				continue;
			}
			if (!readingCode && !InstrMap.toCode.keySet().contains(arr_code[0])) {
				try {
					int arg = Integer.parseInt(arr_code[0], 16);
					int arg1 = Integer.parseInt(arr_code[1], 16);
					inputs++;
					continue;
				} catch (NumberFormatException e) {
					error.append("\nError (" + inputFileName + ".pasm, " + (i + 1) + "): data has non-numeric memory address");
					readingCode = true;
					continue;
				}
			}
			if (!InstrMap.toCode.keySet().contains(arr_code[0].toUpperCase())) {
				error.append("\nError (" + inputFileName + ".pasm, " + (i + 1) + "): illegal mnemonic");
				continue;
			}
			if (!arr_code[0].equals(arr_code[0].toUpperCase())) {
				error.append("\nError (" + inputFileName + ".pasm, " + (i + 1) + "): mnemonic must be upper case");
				continue;
			}
			if ((noArgument.contains(arr_code[0]) && arr_code.length > 1)) {
				error.append("\nError (" + inputFileName + ".pasm, " + (i + 1) + "): "+ arr_code[0] +" cannot take arguments");
				continue;
			}
			else if (!noArgument.contains(arr_code[0]) && (arr_code.length < 2)) {
				error.append("\nError (" + inputFileName + ".pasm, " + (i + 1) + "): "+ arr_code[0] +" is missing an argument");
				continue;
			}
			else if (!noArgument.contains(arr_code[0]) && (arr_code.length > 2)) {
				error.append("\nError (" + inputFileName + ".pasm, " + (i + 1) + "): "+ arr_code[0] +" has too many arguments");
				continue;
			}
			else if (!noArgument.contains(arr_code[0])){
				try {
					int arg = Integer.parseInt(arr_code[1], 16);
				} catch (NumberFormatException e) {
					error.append("\nError (" + inputFileName + ".pasm, " + (i + 1) + "): "+ arr_code[1] +" argument is not a hex number");
				}
			}
